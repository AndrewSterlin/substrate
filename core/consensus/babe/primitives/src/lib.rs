// Copyright 2019 Parity Technologies (UK) Ltd.
// This file is part of Substrate.

// Substrate is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Substrate is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Substrate.  If not, see <http://www.gnu.org/licenses/>.

//! Primitives for BABE.

#![cfg_attr(not(feature = "std"), no_std)]

use parity_codec::{Encode, Decode, Codec};
use rstd::vec::Vec;
use runtime_primitives::{
	ConsensusEngineId, traits::{Block as BlockT, Header, Verify}, DigestItem,
	generic::OpaqueDigestItemId
};
use substrate_primitives::sr25519::{Public, Signature};
use substrate_client::decl_runtime_apis;
use consensus_accountable_safety_primitives::AuthorshipEquivocationProof;

/// A Babe authority identifier. Necessarily equivalent to the schnorrkel public key used in
/// the main Babe module. If that ever changes, then this must, too.
pub type AuthorityId = Public;

/// A Babe authority signature.
pub type AuthoritySignature = Signature;

/// The `ConsensusEngineId` of BABE.
pub const BABE_ENGINE_ID: ConsensusEngineId = *b"BABE";

/// The length of the VRF output
pub const VRF_OUTPUT_LENGTH: usize = 32;

/// The length of the VRF proof
pub const VRF_PROOF_LENGTH: usize = 64;

/// The length of the public key
pub const PUBLIC_KEY_LENGTH: usize = 32;

/// The index of an authority.
pub type AuthorityIndex = u64;

/// A slot number.
pub type SlotNumber = u64;

/// The weight of an authority.
pub type Weight = u64;

/// An consensus log item for BABE.
#[derive(Decode, Encode)]
pub enum ConsensusLog {
	/// The epoch has changed. This provides information about the
	/// epoch _after_ next: what slot number it will start at, who are the authorities (and their weights)
	/// and the next epoch randomness. The information for the _next_ epoch should already
	/// be available.
	#[codec(index = "1")]
	NextEpochData(SlotNumber, Vec<(AuthorityId, Weight)>, [u8; VRF_OUTPUT_LENGTH]),
	/// Disable the authority with given index.
	#[codec(index = "2")]
	OnDisabled(AuthorityIndex),
}

/// Configuration data used by the BABE consensus engine.
#[derive(Copy, Clone, Hash, PartialEq, Eq, Debug, Encode, Decode)]
pub struct BabeConfiguration {
	/// The slot duration in milliseconds for BABE. Currently, only
	/// the value provided by this type at genesis will be used.
	///
	/// Dynamic slot duration may be supported in the future.
	pub slot_duration: u64,

	/// The expected block time in milliseconds for BABE. Currently,
	/// only the value provided by this type at genesis will be used.
	///
	/// Dynamic expected block time may be supported in the future.
	pub expected_block_time: u64,

	/// The maximum permitted VRF output, or *threshold*, for BABE. Currently,
	/// only the value provided by this type at genesis will be used.
	///
	/// Dynamic thresholds may be supported in the future.
	pub threshold: u64,

	/// The minimum number of blocks that must be received before running the
	/// median algorithm to compute the offset between the on-chain time and the
	/// local time. Currently, only the value provided by this type at genesis
	/// will be used, but this is subject to change.
	///
	/// Blocks less than `self.median_required_blocks` must be generated by an
	/// *initial validator* â€• that is, a node that was a validator at genesis.
	pub median_required_blocks: u64,
}

#[cfg(feature = "std")]
impl slots::SlotData for BabeConfiguration {
	/// Return the slot duration in milliseconds for BABE. Currently, only
	/// the value provided by this type at genesis will be used.
	///
	/// Dynamic slot duration may be supported in the future.
	fn slot_duration(&self) -> u64 {
		self.slot_duration
	}

	const SLOT_KEY: &'static [u8] = b"babe_bootstrap_data";
}

decl_runtime_apis! {
	/// API necessary for block authorship with BABE.
	pub trait BabeApi<Equivocation: AuthorshipEquivocationProof + Codec> {
		/// Return the configuration for BABE. Currently,
		/// only the value provided by this type at genesis will be used.
		///
		/// Dynamic configuration may be supported in the future.
		fn startup_data() -> BabeConfiguration;

		/// Get the current authorites for Babe.
		fn authorities() -> Vec<AuthorityId>;

		/// Construct a call to report the equivocation.
		fn construct_equivocation_report_call(proof: Equivocation) -> Option<Vec<u8>>;
	}
}


/// A digest item which is usable with BABE consensus.
pub trait CompatibleDigestItem {
	/// Construct a digest item which contains a BABE pre-digest.
	fn babe_pre_digest<D: Codec>(seal: D) -> Self;

	/// If this item is an BABE pre-digest, return it.
	fn as_babe_pre_digest<D: Codec>(&self) -> Option<D>;

	/// Construct a digest item which contains a BABE seal.
	fn babe_seal<S: Codec + Verify>(signature: S) -> Self;

	/// If this item is a BABE signature, return the signature.
	fn as_babe_seal<S: Codec + Verify>(&self) -> Option<S>;
}

/// Extract the digest item type for a block.
pub type DigestItemForHeader<H> = DigestItem<<H as Header>::Hash>;

/// Find Babe's pre-digest.
pub fn find_pre_digest<H: Header, D: Codec>(header: &H) -> Result<D, &str>
	where DigestItemForHeader<H>: CompatibleDigestItem,
{
	let mut pre_digest: Option<_> = None;
	for log in header.digest().logs() {
		match (log.as_babe_pre_digest::<D>(), pre_digest.is_some()) {
			(Some(_), true) => Err("Multiple BABE pre-runtime headers, rejecting!")?,
			(None, _) => {},
			(s, false) => pre_digest = s,
		}
	}
	pre_digest.ok_or_else(|| "No BABE pre-runtime digest found")
}


impl<Hash> CompatibleDigestItem for DigestItem<Hash> where
	Hash: Send + Sync + Eq + Clone + Codec + 'static,
{
	fn babe_pre_digest<D: Codec>(digest: D) -> Self {
		DigestItem::PreRuntime(BABE_ENGINE_ID, digest.encode())
	}

	fn as_babe_pre_digest<D: Codec>(&self) -> Option<D> {
		self.try_to(OpaqueDigestItemId::PreRuntime(&BABE_ENGINE_ID))
	}

	fn babe_seal<S: Verify + Codec>(signature: S) -> Self {
		DigestItem::Seal(BABE_ENGINE_ID, signature.encode())
	}

	fn as_babe_seal<S: Verify + Codec>(&self) -> Option<S> {
		self.try_to(OpaqueDigestItemId::Seal(&BABE_ENGINE_ID))
	}
}

/// Raw Babe pre-digest
pub type RawBabePreDigest = (
	[u8; VRF_OUTPUT_LENGTH],
	[u8; VRF_PROOF_LENGTH],
	u64,
	u64,
);

/// Get the slot.
pub fn get_slot<H: Header>(header: &H) -> Result<SlotNumber, &str>
	where DigestItemForHeader<H>: CompatibleDigestItem,
{
	find_pre_digest::<H, RawBabePreDigest>(header)
		.map(|raw_pre_digest| raw_pre_digest.3)
}


/// Represents an Babe equivocation proof.
#[derive(Debug, Clone, Encode, Decode, PartialEq)]
pub struct BabeEquivocationProof<H, S, I, P> {
	identity: I,
	identity_proof: P,
	first_header: H,
	second_header: H,
	first_signature: S,
	second_signature: S,
}

impl<H, S, I, P> AuthorshipEquivocationProof for BabeEquivocationProof<H, S, I, P>
where
	H: Header,
	S: Verify<Signer=I> + Codec,
	I: Codec,
	P: Codec,
{
	type Header = H;
	type Signature = S;
	type Identity = I;
	type InclusionProof = P;

	/// Create a new Babe equivocation proof.
	fn new(
		identity: I,
		identity_proof: P,
		first_header: H,
		second_header: H,
		first_signature: S,
		second_signature: S,
	) -> Self {
		BabeEquivocationProof {
			identity,
			identity_proof,
			first_header,
			second_header,
			first_signature,
			second_signature,
		}
	}

	/// Check the validity of the equivocation proof.
	fn is_valid(&self) -> bool {
		let first_header = self.first_header();
		let second_header = self.second_header();

		if first_header == second_header {
			return false
		}

		let maybe_first_slot = get_slot::<H>(first_header);
		let maybe_second_slot = get_slot::<H>(second_header);

		if maybe_first_slot.is_ok() && maybe_first_slot == maybe_second_slot {
			// TODO: Check that author matches slot author (improve HistoricalSession).
			let author = self.identity();

			if !self.first_signature().verify(first_header.hash().as_ref(), author) {
				return false
			}

			if !self.second_signature().verify(second_header.hash().as_ref(), author) {
				return false
			}

			return true;
		}

		false
	}

	/// Get the identity of the suspect of equivocating.
	fn identity(&self) -> &I {
		&self.identity
	}

	/// Get the identity proof.
	fn identity_proof(&self) -> &P {
		&self.identity_proof
	}

	/// Get the first header involved in the equivocation.
	fn first_header(&self) -> &H {
		&self.first_header
	}

	/// Get the second header involved in the equivocation.
	fn second_header(&self) -> &H {
		&self.second_header
	}

	fn first_signature(&self) -> &S {
		&self.first_signature
	}

	fn second_signature(&self) -> &S {
		&self.second_signature
	}
}
